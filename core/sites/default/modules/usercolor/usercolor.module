<?php

/**
 * @file
 * Allow users to create custom color schemes.
 *
 * This module controls the creation of user color schemes.
 * It is pretty specific to Melo but is intended eventually for
 * an open source release.  It is inspired by the core color.module
 * but in an effort not to fork core it was created independently.
 */

/**
 * Implementation of hook_menu().
 */
function usercolor_menu() {
  $items = array();

  // List touch types
  $items['admin/settings/usercolor'] = array(
    'title' => 'User Colors',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usercolor_settings'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Administer User Colors',
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['mymelo/colors/default/%'] = array(
    'title' => 'Set as Default',
    'page callback' => 'usercolor_set_default',
    'access arguments' => array('create color_scheme content'),
    'type' => MENU_NORMAL_ITEM
  );
  
  return $items;
}

/**
 * Settings for the color features.
 */
function usercolor_settings() {

  $form = array();
   
  $types = content_types();
  foreach($types as $type => $content) {
    $options[$type] = $content['name'];
  }
  $form['usercolor_node_type'] = array(
    '#type' => 'select',
    '#title' => 'Color Scheme Node Type',
    '#description' => 'Select the content type that you will use as your Color Scheme.',
    '#options' => $options,
    '#default_value' => variable_get('usercolor_node_type', '')
    );
    
  $form['usercolor_header_field_name'] = array(
    '#type' => 'text',
    '#title' => 'Header Field Name',
    '#default_value' => variable_get('usercolor_header_field_name', 'field_scheme_header_color')
    );
   
  return system_settings_form($form);

}

/**
 * Implementation of hook_widget_info().
 */
function usercolor_widget_info() {
  return array(
    'usercolor_rgb' => array(
      'label' => t('RGB Color Selector'),
      'field types' => array('text'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function usercolor_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => 'usercolor_rgb',
    '#default_value' => isset($items[$delta]) ? $items[$delta] : ''
  );
  return $element;
}

/**
 * Implementation of FAPI hook_elements().
 */
function usercolor_elements() {
  return array(
    'usercolor_rgb' => array(
      '#input' => TRUE,
      '#columns' => array('value'), '#delta' => 0,
      '#process' => array('usercolor_rgb_process'),
      '#autocomplete_path' => FALSE,
    )
  );
}

/**
 * Implementation of hook_form_alter().
 *
 *  Used to alter the color scheme node.
 */
function usercolor_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == variable_get('usercolor_node_type', '').'_node_form') {
  
    // Add Farbtastic color picker
    drupal_add_css('misc/farbtastic/farbtastic.css', 'module', 'all', FALSE);
    drupal_add_js('misc/farbtastic/farbtastic.js');

    // Add custom CSS/JS
    $base = drupal_get_path('module', 'usercolor');
    drupal_add_js($base .'/usercolor.js');
    drupal_add_css($base .'/usercolor.css');

    // Save the fields for reference in the javascript
    $input_refs = array();
    $i=0;
    foreach($form as $key => $val) {
      if(substr($key, 0, 6) == 'field_' && $val[0]['#type'] == 'usercolor_rgb') {
        $key = substr($key, 6);
        $palette[$key] = $val[0]['#default_value']['value'];
        $input_refs[$key] = $i;
        $i++;
      }
    }
    drupal_add_js(array('color' => array(
      'input_refs' => $input_refs
    )), 'setting');
    
    drupal_add_js(array('color' => array(
      'reference' => $palette
    )), 'setting');
  
    $form['pre_html'] = array(
      '#type' => 'markup',
      '#weight' => '-10',
      '#value' => '<div id="color_scheme_form"><div class="color-form">'
      );
    $form['post_html'] = array(
      '#type' => 'markup',
      '#weight' => '10',
      '#value' => '</div></div>'
      );
      
    $form['css_preview'] = array(
      '#type' => 'markup',
      '#weight' => variable_get('usercolor_preview_weight', -3),
      '#value' => '<div id="preview"><p>This is body text and a <a href="#">body link</a>.</p><div id="preview-body"><p>This is page text and a <a href="#">page link</a>.</p><div id="text"><h2>Lorem ipsum dolor</h2><p>Sit amet, consectetur adipisicing elit, sed  et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud <a href="#">exercitation ullamco</a> laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></div></div><div id="img" style="background: url(/'.path_to_theme().'/color/head-prev.png) left top no-repeat"></div></div>',
      );
      
    // Hide the path field
    $form['field_scheme_header_path']['#prefix'] = '<div style="display: none">';
    $form['field_scheme_header_path']['#suffix'] = '</div>';
      
    unset($form['buttons']['preview']);

  }
}

/**
 * Set default color scheme
 */
function usercolor_set_default() {
  $nid = arg(3);
  if(is_numeric($nid) && $node = node_load($nid)) {
    if($node->type == 'color_scheme') {
      // Only currently logged in user is supported
      global $user;
      if($user->profile_default_color_scheme_id != $nid) {
        // Save this individual color field
        melodev_save_profile_field($user->uid, 'profile_default_color_scheme_id', $nid);
        drupal_set_message('Your default colors have been updated.');
        drupal_goto('mymelo/content/colors');
      } else {
        drupal_set_message('That\'s already your default color scheme!');
        drupal_goto('mymelo/content/colors');
      }
    } else {
      drupal_set_message('Sorry, '.$nid.' is not a valid Color Scheme ID.');
    }
  } else if($nid == 'reset') {
    global $user;
    melodev_save_profile_field($user->uid, 'profile_default_color_scheme_id', 0);
    drupal_set_message('Your colors have been reset.');
    drupal_goto('mymelo/content/colors');    
  } else {
    drupal_set_message('Unable to find color scheme with ID '.$nid.'.');
  }
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function usercolor_rgb_process($element, $edit, $form_state, $form) {

  $element['#type'] = 'text_textfield';

  $field = $form['#field_info'][$element['#field_name']];

  $field_key = $element['#columns'][0];
  $delta = $element['#delta'];
  $element[$field_key] = array(
    '#type' => 'textfield',
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL,
    '#autocomplete_path' => $element['#autocomplete_path'],
    '#size' => 10,
    '#attributes' => array('class' => 'text-color text'),
    
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );

  $element[$field_key]['#maxlength'] = !empty($field['max_length']) ? $field['max_length'] : NULL;

  if (!empty($field['text_processing'])) {
    $filter_key = $element['#columns'][1];
    $format = isset($element['#value'][$filter_key]) ? $element['#value'][$filter_key] : FILTER_FORMAT_DEFAULT;
    $parents = array_merge($element['#parents'] , array($filter_key));
    $element[$filter_key] = filter_form($format, 1, $parents);
  }

  // Used so that hook_field('validate') knows where to flag an error.
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($element['#parents'], array($field_key))),
  );
  
  return $element;
}

/**
 * Implementation of hook_nodeapi().
 *
 *  Used to alter the color scheme node.
 */
function usercolor_nodeapi(&$node, $op, $teaser, $page) {

  static $colors_set;

  $donodes = array('blog', 'photo', 'favorite', 'poll', 'folder');

  if($node->type == variable_get('usercolor_node_type', '')) {
    switch ($op) {
      case 'insert':
        // Create the stylesheet for saving
        $basecssfile = path_to_theme() . '/color/colors-base.css';
        $fp = fopen($basecssfile, 'r');
        if(!$fp) {
          drupal_set_message('Cannot find base CSS file for editing.');
          return false;
        }
        $basecss = fread($fp, filesize($basecssfile));
        fclose($fp);
       
        // Loop through node fields and replace CSS
        foreach($node as $key => $var) {
          if($key == variable_get('usercolor_header_field_name', 'field_scheme_header_color')) {
              $header = usercolor_create_header($node);
              $basecss = str_replace('['.$key.']', url($header), $basecss);
          } else {
            if(strpos($basecss, '['.$key.']') && Isset($var[0]['value'])) {
              $basecss = str_replace('['.$key.']', $var[0]['value'], $basecss);
            }
          }
        }
        
        $node->stylesheet = $basecss;
        
        // Create the header Image
        $node->field_scheme_header_path[0]['value'] = $header;
        $node->header_image = url($node->field_scheme_header_path[0]['value']);
        
        // Save the stylesheet
        if(!usercolor_save_css($node->nid, $node->stylesheet, $node->changed)) {
          drupal_set_message('An error occurred attempting to save your Colors.');
        }
      break;

      case 'delete':
      break;
      case 'update':
        // Save the stylesheet
        if(!usercolor_save_css($node->nid, $node->stylesheet, $node->changed)) {
          drupal_set_message('An error occurred attempting to save your Colors.');
        }
      break;
      case 'load':
        // Load the stylesheet -- use a symbolic link
        $uncached = file_directory_path() . '/usercolor/colors-'.$node->nid.'-'.$node->changed.'.css';
        $cached = file_directory_path() . '/usercolor/colors-'.$node->nid.'.css';
        if(file_exists($uncached)) {
          $node->css = $uncached;
        } else {
          $node->css = $cached;
        }
      break;
      case 'presave':
        if(is_numeric($node->nid)) {
          // Create the stylesheet for saving
          $basecssfile = path_to_theme() . '/color/colors-base.css';
          $fp = fopen($basecssfile, 'r');
          if(!$fp) {
            drupal_set_message('Cannot find base CSS file for editing.');
            return false;
          }
          $basecss = fread($fp, filesize($basecssfile));
          fclose($fp);
          
          // Load the old node to look for modified fields
          $old_node = node_load(array('nid'=>$node->nid));
          
          // Check if their header image has changed since last save
          $rgbfield = variable_get('usercolor_header_field_name', 'field_scheme_header_color');
          $arr_old = $old_node->$rgbfield;
          $arr_new = $node->$rgbfield;
          if( 
              (isset($node->field_scheme_header_img) && file_exists($node->field_scheme_header_img[0]['filepath'])) || 
              ($arr_old[0]['value'] != $arr_new[0]['value'] || is_null($node->field_scheme_header_path[0]['value']))
          ) {
              // Create the new header Image
              $header = usercolor_create_header($node);
              $node->field_scheme_header_path[0]['value'] = $header;
          }
          // Loop through node fields and replace CSS
          foreach($node as $key => $var) {
            if($key == variable_get('usercolor_header_field_name', 'field_scheme_header_color')) {
              if(strpos($basecss, '['.$key.']')) {
                $header_url = url($node->field_scheme_header_path[0]['value']);
                $basecss = str_replace('['.$key.']', $header_url, $basecss);
              }
            } else {
              if(strpos($basecss, '['.$key.']') && Isset($var[0]['value'])) {
                $basecss = str_replace('['.$key.']', $var[0]['value'], $basecss);
              }
            }
          }
          
          $node->stylesheet = $basecss;
          $node->header_image = url($node->field_scheme_header_path[0]['value']);
        }
      break;
      case 'view':
      
        // Add the stylesheet to this node's page
        if($page) {
          $css = $node->css;
          if(file_check_path($css)) {
             drupal_add_css($node->css);
          }
        }
      
      break;
    }
  // Add colors
  } else if($page && arg(1) == $node->nid && in_array($node->type, $donodes)) {
    $set = false;
    // Check if they have folder colors
    if($node->type == 'folder') {
      if(isset($node->field_color_scheme_reference[0]['nid'])) {
        $scheme = node_load($node->field_color_scheme_reference[0]['nid']);
        drupal_add_css($scheme->css);
        $set = true;
      }
    }
    // Check if they have default colors
    if(!$set && !$colors_set) {
      $acct = user_load($node->uid);
      // @TODO Change to color permissions
      if(is_numeric($acct->profile_default_color_scheme_id)) {
        $colornode = node_load($acct->profile_default_color_scheme_id);
        $css = $colornode->css;
        if(file_check_path($css)) {
          $css_url = $colornode->css;
          drupal_add_css($css_url);
          $set=true;
        }
      }
    }
    $colors_set=$set;
  }
}

/**
 * Generate a teaser icon for a color scheme.
 */
function usercolor_show_teaser($scheme) {

  if(file_exists($node->field_scheme_header_img[0]['filepath'])) {
    $preset = 'colors_header_thumb_custom';
  } else {
    $preset = 'colors_header_thumb';
  }
  $path = $scheme->field_scheme_header_path[0]['value'];
  $old_head_path = file_directory_path() . '/usercolor/header-'.$scheme->nid.'.png';
  if(!is_null($path)) {
    $img = theme('imagecache', $preset, url($path));
  } else {
    $img = theme('imagecache', $preset, url($old_head_path));
  }
  
  $output = '<div style="padding: 10px; background: '.$scheme->field_scheme_body_color[0]['value'].'; border: solid '.$scheme->field_scheme_bg_color[0]['value'].' 5px; width: 135px">';
  $output .= '<div style="padding: 20px; background: '.$scheme->field_scheme_block_body[0]['value'].'; border: solid '.$scheme->field_scheme_block_header[0]['value'].' 5px">';
  $output .= $img;
  $output .= '</div></div>';
    
  echo l($output, 'node/'.$scheme->nid, array('html'=>true));

}

/**
 * Implementation of hook_menu().
 */
function usercolor_save_css($id, $css, $changed) {
    // Make sure we can write to our directory
    $dir = file_directory_path() . '/usercolor';
    if(!file_check_directory($dir, 1)) {
      watchdog('usercolor', 'Unable to create or write to the usercolor directory.');
      drupal_set_message('An error occured attempting to write to the chosen directory.');
      return false;
    }
    
    // Remove old CSS before saving new
    $removefiles = glob($dir . '/colors-'.$id.'-*.css');
    foreach($removefiles as $rfile) {
      unlink($rfile);
    }

    // Save new CSS
    $file = $dir . '/colors-'.$id.'-'.$changed.'.css';
    $fp = fopen($file, 'w');
    if(!$fp) {
      drupal_set_message('Unable to open CSS file for writing.');
      return false;
    }
    fputs($fp, $css);
    fclose($fp);
    return $file;
}

/**
 * Generate a custom header image.
 */
function usercolor_create_header($node) {

  // Check if they've uploaded a custom image
  if(isset($node->field_scheme_header_img) && file_exists($node->field_scheme_header_img[0]['filepath'])) {
    $newdst = file_directory_path() . '/usercolor/header-'.$node->nid.'-'.$node->changed.'.png';
    $src = file_directory_path() . '/imagecache/colors_header/' . $node->field_scheme_header_img[0]['filepath'];
    // Generate the correct image
    $url = url($src, array('absolute'=>true));
    $fp = fopen($url, 'r');
    while($chunk = fread($fp, 1024)) {
      $conts .= $chunk;
    }
    fclose($fp);
    // Copy it over
    $fp = fopen($newdst, 'w');
    fwrite($fp, $conts);
    fclose($fp);
    
    // Delete old image
    if(!is_null($node->field_scheme_header_path[0]['path'])) {
      unlink($node->field_scheme_header_path[0]['path']);
    }
    return $newdst;
  }

  // Create a temporary image
  $dst = file_directory_temp() . '/tmp-'.$node->nid.'-header.png';
  $src = path_to_theme() . '/color/base-header.png';
  if(!copy($src, $dst)) {
    drupal_set_message('Unable to create temporary header file.');
    watchdog('usercolor', 'Could not copy '.$src.' to '.dst.'.');
    return false;
  }
  
  // Custom color the header
  $rgbfield = variable_get('usercolor_header_field_name', 'field_scheme_header_color');
  $arr = $node->$rgbfield;
  $rgb = str_replace('#', '', $arr[0]['value']);
  if(!$rgb) {
    $rgb = 'ffffff';
  }
  $rgbcolors = array(
    'r' => hexdec(substr($rgb, 0, 2)),
    'g' => hexdec(substr($rgb, 2, 2)),
    'b' => hexdec(substr($rgb, 4, 2))
    );

  // Borrowed from color.module
  
  // Prepare template image.
  $source = $dst;
  $source = imagecreatefrompng($source);
  $width = imagesx($source);
  $height = imagesy($source);

  // Prepare target buffer.
  $target = imagecreatetruecolor($width, $height);
  imagealphablending($target, true);
  $color = imagecolorallocate($target, $rgbcolors['r'], $rgbcolors['g'], $rgbcolors['b']);
  imagefill($target, 0, 0, $color);

  // Blend over template.
  imagecopy($target, $source, 0, 0, 0, 0, $width, $height);
  
  // Cut out the transparent part
  $red = imagecolorallocate($target, 255, 0, 0);
  imagecolortransparent($target, $red);

  // Start Buffering
  ob_start();
  imagepng($target);
  $contents =  ob_get_contents();
  ob_end_clean();
  
  // Delete old image
  if(!is_null($node->field_scheme_header_path[0]['value'])) {
    unlink($node->field_scheme_header_path[0]['value']);
  }
  
  // Save the image
  $newdst = file_directory_path() . '/usercolor/header-'.$node->nid.'-'.$node->changed.'.png';
  $fp = fopen($newdst, 'w');
  fputs($fp, $contents);
  fclose($fp);
  
  imagedestroy($target);
  imagedestroy($source);
  unlink($dst);
  
  return $newdst;
}